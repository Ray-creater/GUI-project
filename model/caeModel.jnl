# Save by Ray on 2020_11_20-21.49.36; build 6.13-1 2013_05_16-10.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Concrete')
mdb.models['Model-1'].materials['Concrete'].Density(table=((2.4e-09, ), ))
mdb.models['Model-1'].materials['Concrete'].Elastic(table=((20800000000.0, 
    0.2), ))
mdb.models['Model-1'].materials['Concrete'].ConcreteDamagedPlasticity(table=((
    40.0, 0.1, 1.225, 0.6667, 0.0005), ))
mdb.models['Model-1'].materials['Concrete'].concreteDamagedPlasticity.ConcreteCompressionHardening(
    table=((6780000.0, 0.0), (12500000.0, 6.025e-05), (16900000.0, 0.0001815), 
    (20100000.0, 0.0003637), (22000000.0, 0.0006069), (22600000.0, 0.0009111), 
    (19200000.0, 0.002874), (1130.0, 0.02)))
mdb.models['Model-1'].materials['Concrete'].concreteDamagedPlasticity.ConcreteTensionStiffening(
    table=((2260000.0, 0.0), ))
# Save by Ray on 2020_11_20-21.58.12; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_20-21.58.13; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_20-21.58.14; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_20-21.58.17; build 6.13-1 2013_05_16-10.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['Concrete'].density.setValues(table=((2400.0, 
    ), ))
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Density(table=((7800.0, ), ))
mdb.models['Model-1'].materials['Steel'].Elastic(table=((210000000000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['Steel'].Plastic(table=((327800000.0, 0.0), (
    873800000.0, 0.2574)))
mdb.models['Model-1'].materials.changeKey(fromName='Steel', toName=
    'BiaLinerSteel')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(25.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-24.4948974278318, 
    -5.0), point2=(24.4948974277359, -5.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -25.583324432373, 1.61672973632813))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], point1=(
    25.4083862304688, -1.26716613769531))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['Part-1'].AnalyticRigidSurfExtrude(depth=200.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[3], MIDDLE), point2=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['Part-1'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Part-1'].datums[2])
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName=
    'LoadSupporter')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-100.0, -200.0)
    , point2=(100.0, 200.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['LoadSupporter'].features['3D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['LoadSupporter'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['LoadSupporter'].features['3D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], ))
del mdb.models['Model-1'].sketches['__edit__']
del mdb.models['Model-1'].parts['LoadSupporter']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.025, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, -0.005))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.005), 
    point2=(-0.0244948973413557, -0.005))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.005), 
    point2=(0.0244948973413557, -0.005))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -0.0250180289149284, 0.00501526286825538))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], point1=(
    0.0247665606439114, -0.00246283272281289))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='LoadSupporter', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['LoadSupporter'].AnalyticRigidSurfExtrude(depth=0.2
    , sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['LoadSupporter'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['LoadSupporter'].InterestingPoint(
    mdb.models['Model-1'].parts['LoadSupporter'].edges[4], MIDDLE), point2=
    mdb.models['Model-1'].parts['LoadSupporter'].InterestingPoint(
    mdb.models['Model-1'].parts['LoadSupporter'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['LoadSupporter'].ReferencePoint(point=
    mdb.models['Model-1'].parts['LoadSupporter'].datums[2])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-0.1, -0.2), 
    point2=(0.1, 0.2))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Concrete', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Concrete'].BaseSolidExtrude(depth=1.2, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[3], vector=(0.0, 0.0, 
    0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[2], vector=(0.0, 0.0, 
    0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    -0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[1], vector=(0.0, 0.0, 
    -0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[2], vector=(0.0, 0.0, 
    -0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[3], point2=
    mdb.models['Model-1'].parts['Concrete'].vertices[2])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[5], point2=
    mdb.models['Model-1'].parts['Concrete'].vertices[1])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[4])
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[1], vector=(0.0, 0.0, 
    -0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    -0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[10], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[12], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[2], vector=(0.0, 0.0, 
    0.25))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[3], vector=(0.0, 0.0, 
    0.25))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[15], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[16], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[7], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[3])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[6], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[2])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[16], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[18])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[17], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[15])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[13], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[10])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[12], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[14])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[4], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[9])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[5], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[8])
del mdb.models['Model-1'].parts['Concrete'].features['Datum pt-10']
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[1], point=
    mdb.models['Model-1'].parts['Concrete'].datums[8])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[10], point=
    mdb.models['Model-1'].parts['Concrete'].datums[4])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[4], point=
    mdb.models['Model-1'].parts['Concrete'].datums[13])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[16], point=
    mdb.models['Model-1'].parts['Concrete'].datums[10])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[4], point=
    mdb.models['Model-1'].parts['Concrete'].datums[17])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[16], point=
    mdb.models['Model-1'].parts['Concrete'].datums[15])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[18], point=
    mdb.models['Model-1'].parts['Concrete'].datums[3])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[10], point=
    mdb.models['Model-1'].parts['Concrete'].datums[7])
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Concrete-1', 
    part=mdb.models['Model-1'].parts['Concrete'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'LoadSupporter-1', part=mdb.models['Model-1'].parts['LoadSupporter'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    0.025, 0.0), axisPoint=(0.0, -0.025, -0.1), instanceList=(
    'LoadSupporter-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('LoadSupporter-1', )
    , vector=(-0.1, 0.225, 0.375))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1', ), 
    number1=2, number2=2, spacing1=0.2, spacing2=0.0199999999153)
mdb.models['Model-1'].rootAssembly.deleteFeatures(('LoadSupporter-1-lin-2-2', 
    'LoadSupporter-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1-lin-1-2', 
    ), number1=1, number2=2, spacing1=0.2, spacing2=0.02)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-1-2', ), vector=(0.0, -0.045, 0.65))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-1-2', ), vector=(0.0, 0.005, 0.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.2, 0.0, 
    0.0), axisPoint=(-0.1, 0.24, 0.275), instanceList=(
    'LoadSupporter-1-lin-1-2', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2', ), vector=(0.0, -0.46, -0.2))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1-lin-1-2', 
    ), number1=2, number2=1, spacing1=0.2, spacing2=0.02)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-2-1', ), vector=(-0.2, 0.02, 0.525))
# Save by Ray on 2020_11_20-22.41.13; build 6.13-1 2013_05_16-10.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-2-1', ), vector=(0.0, -0.02, 0.525))
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-1'].faces.getSequenceFromMask(
    ('[#800000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-1'], name=
    'Constraint-1', positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-1'], thickness=ON, 
    tieRotations=ON)
del mdb.models['Model-1'].constraints['Constraint-1']
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-1'].faces.getSequenceFromMask(
    ('[#800000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-3'], name='up1', 
    positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-3'], thickness=ON, 
    tieRotations=ON)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-5', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-1'].faces.getSequenceFromMask(
    ('[#0 #2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-5', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2-lin-1-2'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-5'], name='up2', 
    positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-5'], thickness=ON, 
    tieRotations=ON)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-7', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-7', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-7'], name='Down1', 
    positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-7'], thickness=ON, 
    tieRotations=ON)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-9', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-1'].faces.getSequenceFromMask(
    ('[#0 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-9', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2-lin-2-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-9'], name='Down2', 
    positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-9'], thickness=ON, 
    tieRotations=ON)
mdb.models['Model-1'].rootAssembly.Set(name='Set-1', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2'].referencePoints[3], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
mdb.models['Model-1'].rootAssembly.Set(name='Set-2', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2-lin-2-1'].referencePoints[3], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-2'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
mdb.models['Model-1'].StaticStep(description='load', name='Step-1', previous=
    'Initial')
mdb.models['Model-1'].rootAssembly.Set(name='Set-3', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1'].referencePoints[3], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['Set-3'], u1=UNSET, 
    u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='Set-4', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2-lin-1-2'].referencePoints[3], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-4', region=mdb.models['Model-1'].rootAssembly.sets['Set-4'], u1=UNSET, 
    u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(u2=0.02)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValues(u2=0.02)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValues(u2=-0.02)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(u2=-0.02)
mdb.models['Model-1'].parts['Concrete'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['Concrete'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='up', referencePoints=((
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1-lin-1-2-lin-1-2'].referencePoints[3], 
    ), (
    mdb.models['Model-1'].rootAssembly.instances['LoadSupporter-1'].referencePoints[3], 
    )))
mdb.models['Model-1'].HistoryOutputRequest(createStepName='Step-1', name=
    'H-Output-2', rebar=EXCLUDE, region=
    mdb.models['Model-1'].rootAssembly.sets['up'], sectionPoints=DEFAULT, 
    variables=('RF1', 'RF2', 'RF3'))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, queue=None, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'USER-20161022CS', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THE *TIE PAIR BETWEEN SURFACES ASSEMBLY_LOADSUPPORTER-1-LIN-1-2_S_SURF-7 AND ASSEMBLY_M_SURF-7 ATTEMPTS TO TIE ONE DEFORMABLE AND ONE RIGID BODY. SINCE THE *TIE SLAVE SURFACE BELONGS IN PART OR ENTIRELY TO THE RIGID BODY, THE NODES ON THIS SURFACE WOULD BE OVERCONSTRAINED  BY THE *RIGID BODY AND *TIE COMBINATION. THE SLAVE AND MASTER ARE SWITCHED SO THAT OVERCONSTRAINTS ARE AVOIDED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THE *TIE PAIR BETWEEN SURFACES ASSEMBLY_LOADSUPPORTER-1-LIN-1-2-LIN-2-1_S_SURF-9 AND ASSEMBLY_M_SURF-9 ATTEMPTS TO TIE ONE DEFORMABLE AND ONE RIGID BODY. SINCE THE *TIE SLAVE SURFACE BELONGS IN PART OR ENTIRELY TO THE RIGID BODY, THE NODES ON THIS SURFACE WOULD BE OVERCONSTRAINED  BY THE *RIGID BODY AND *TIE COMBINATION. THE SLAVE AND MASTER ARE SWITCHED SO THAT OVERCONSTRAINTS ARE AVOIDED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THE *TIE PAIR BETWEEN SURFACES ASSEMBLY_LOADSUPPORTER-1_S_SURF-1 AND ASSEMBLY_M_SURF-3 ATTEMPTS TO TIE ONE DEFORMABLE AND ONE RIGID BODY. SINCE THE *TIE SLAVE SURFACE BELONGS IN PART OR ENTIRELY TO THE RIGID BODY, THE NODES ON THIS SURFACE WOULD BE OVERCONSTRAINED  BY THE *RIGID BODY AND *TIE COMBINATION. THE SLAVE AND MASTER ARE SWITCHED SO THAT OVERCONSTRAINTS ARE AVOIDED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THE *TIE PAIR BETWEEN SURFACES ASSEMBLY_LOADSUPPORTER-1-LIN-1-2-LIN-1-2_S_SURF-5 AND ASSEMBLY_M_SURF-5 ATTEMPTS TO TIE ONE DEFORMABLE AND ONE RIGID BODY. SINCE THE *TIE SLAVE SURFACE BELONGS IN PART OR ENTIRELY TO THE RIGID BODY, THE NODES ON THIS SURFACE WOULD BE OVERCONSTRAINED  BY THE *RIGID BODY AND *TIE COMBINATION. THE SLAVE AND MASTER ARE SWITCHED SO THAT OVERCONSTRAINTS ARE AVOIDED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THE OPTION *CONCRETE COMPRESSION HARDENING, STRESS VALUES SMALLER THAN THE MINIMUM (1.00000E-02 TIMES THE STRESS AT INITIAL YIELD) HAVE BEEN SPECIFIED. THE MINIMUM VALUE WILL BE ASSUMED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
# Save by Ray on 2020_11_20-22.58.48; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_21-08.58.00; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_21-08.59.02; build 6.13-1 2013_05_16-10.28.56 126354
# Save by Ray on 2020_11_21-08.59.21; build 6.13-1 2013_05_16-10.28.56 126354
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Concrete')
mdb.models['Model-1'].materials['Concrete'].Density(table=((2.4e-09, ), ))
mdb.models['Model-1'].materials['Concrete'].Elastic(table=((20800000000.0, 
    0.2), ))
mdb.models['Model-1'].materials['Concrete'].ConcreteDamagedPlasticity(table=((
    40.0, 0.1, 1.225, 0.6667, 0.0005), ))
mdb.models['Model-1'].materials['Concrete'].concreteDamagedPlasticity.ConcreteCompressionHardening(
    table=((6780000.0, 0.0), (12500000.0, 6.025e-05), (16900000.0, 0.0001815), 
    (20100000.0, 0.0003637), (22000000.0, 0.0006069), (22600000.0, 0.0009111), 
    (19200000.0, 0.002874), (1130.0, 0.02)))
mdb.models['Model-1'].materials['Concrete'].concreteDamagedPlasticity.ConcreteTensionStiffening(
    table=((2260000.0, 0.0), ))
mdb.models['Model-1'].materials['Concrete'].density.setValues(table=((2400.0, 
    ), ))
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Density(table=((7800.0, ), ))
mdb.models['Model-1'].materials['Steel'].Elastic(table=((210000000000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['Steel'].Plastic(table=((327800000.0, 0.0), (
    873800000.0, 0.2574)))
mdb.models['Model-1'].materials.changeKey(fromName='Steel', toName=
    'BiaLinerSteel')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(25.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-24.4948974278318, 
    -5.0), point2=(24.4948974277359, -5.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -25.583324432373, 1.61672973632813))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], point1=(
    25.4083862304688, -1.26716613769531))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['Part-1'].AnalyticRigidSurfExtrude(depth=200.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[3], MIDDLE), point2=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['Part-1'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Part-1'].datums[2])
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName=
    'LoadSupporter')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-100.0, -200.0)
    , point2=(100.0, 200.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['LoadSupporter'].features['3D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['LoadSupporter'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['LoadSupporter'].features['3D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], ))
del mdb.models['Model-1'].sketches['__edit__']
del mdb.models['Model-1'].parts['LoadSupporter']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.025, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, -0.005))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.005), 
    point2=(-0.0244948973413557, -0.005))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.005), 
    point2=(0.0244948973413557, -0.005))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -0.0250180289149284, 0.00501526286825538))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], point1=(
    0.0247665606439114, -0.00246283272281289))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='LoadSupporter', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['LoadSupporter'].AnalyticRigidSurfExtrude(depth=0.2
    , sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['LoadSupporter'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['LoadSupporter'].InterestingPoint(
    mdb.models['Model-1'].parts['LoadSupporter'].edges[4], MIDDLE), point2=
    mdb.models['Model-1'].parts['LoadSupporter'].InterestingPoint(
    mdb.models['Model-1'].parts['LoadSupporter'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['LoadSupporter'].ReferencePoint(point=
    mdb.models['Model-1'].parts['LoadSupporter'].datums[2])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-0.1, -0.2), 
    point2=(0.1, 0.2))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Concrete', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Concrete'].BaseSolidExtrude(depth=1.2, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[3], vector=(0.0, 0.0, 
    0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[2], vector=(0.0, 0.0, 
    0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    -0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[1], vector=(0.0, 0.0, 
    -0.1))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[2], vector=(0.0, 0.0, 
    -0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[3], point2=
    mdb.models['Model-1'].parts['Concrete'].vertices[2])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[5], point2=
    mdb.models['Model-1'].parts['Concrete'].vertices[1])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[4])
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[1], vector=(0.0, 0.0, 
    -0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[0], vector=(0.0, 0.0, 
    -0.3))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[10], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[12], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[2], vector=(0.0, 0.0, 
    0.25))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].vertices[3], vector=(0.0, 0.0, 
    0.25))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[15], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Concrete'].datums[16], vector=(0.0, 0.0, 
    0.05))
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[7], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[3])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[6], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[2])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[16], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[18])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[17], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[15])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[13], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[10])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[12], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[14])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[4], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[9])
mdb.models['Model-1'].parts['Concrete'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Concrete'].datums[5], point2=
    mdb.models['Model-1'].parts['Concrete'].datums[8])
del mdb.models['Model-1'].parts['Concrete'].features['Datum pt-10']
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[1], point=
    mdb.models['Model-1'].parts['Concrete'].datums[8])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[10], point=
    mdb.models['Model-1'].parts['Concrete'].datums[4])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[4], point=
    mdb.models['Model-1'].parts['Concrete'].datums[13])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[16], point=
    mdb.models['Model-1'].parts['Concrete'].datums[10])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[4], point=
    mdb.models['Model-1'].parts['Concrete'].datums[17])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[16], point=
    mdb.models['Model-1'].parts['Concrete'].datums[15])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[18], point=
    mdb.models['Model-1'].parts['Concrete'].datums[3])
mdb.models['Model-1'].parts['Concrete'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Concrete'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Concrete'].edges[10], point=
    mdb.models['Model-1'].parts['Concrete'].datums[7])
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Concrete-1', 
    part=mdb.models['Model-1'].parts['Concrete'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'LoadSupporter-1', part=mdb.models['Model-1'].parts['LoadSupporter'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    0.025, 0.0), axisPoint=(0.0, -0.025, -0.1), instanceList=(
    'LoadSupporter-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('LoadSupporter-1', )
    , vector=(-0.1, 0.225, 0.375))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1', ), 
    number1=2, number2=2, spacing1=0.2, spacing2=0.0199999999153)
mdb.models['Model-1'].rootAssembly.deleteFeatures(('LoadSupporter-1-lin-2-2', 
    'LoadSupporter-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1-lin-1-2', 
    ), number1=1, number2=2, spacing1=0.2, spacing2=0.02)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-1-2', ), vector=(0.0, -0.045, 0.65))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-1-2', ), vector=(0.0, 0.005, 0.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.2, 0.0, 
    0.0), axisPoint=(-0.1, 0.24, 0.275), instanceList=(
    'LoadSupporter-1-lin-1-2', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2', ), vector=(0.0, -0.46, -0.2))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('LoadSupporter-1-lin-1-2', 
    ), number1=2, number2=1, spacing1=0.2, spacing2=0.02)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'LoadSupporter-1-lin-1-2-lin-2-1', ), vector=(-0.2, 0.02, 0.525))
# Save by Ray on 2020_11_21-08.59.24; build 6.13-1 2013_05_16-10.28.56 126354
